{"version":3,"file":"avatar-generator.cjs.production.min.js","sources":["../src/index.tsx"],"sourcesContent":["import React from \"react\";\n\ntype AvatarPropsType = {\n  seed: string;\n  size?: number;\n  blockSize?: number;\n  colors?: {\n    skin?: string;\n    eye?: string;\n    hair?: string;\n    bg?: string;\n  };\n};\n\nconst Avatar = ({\n  seed,\n  size = 100,\n  blockSize = 10,\n  colors = {},\n}: AvatarPropsType) => {\n  const generateColor = (type: string, defaultColor: string) => {\n    // A simple hash function to get consistent colors based on seed and type\n    let hash = 0;\n    for (let i = 0; i < seed.length; i++) {\n      hash = seed.charCodeAt(i) + ((hash << 5) - hash);\n    }\n    let color = \"#\";\n    for (let i = 0; i < 3; i++) {\n      const value = (hash >> (i * 8 + type.charCodeAt(0))) & 0xff;\n      color += (\"00\" + value.toString(16)).substr(-2);\n    }\n    return color || defaultColor;\n  };\n\n  const skinColor = colors.skin || generateColor(\"skin\", \"#f5d6b3\");\n  const eyeColor = colors.eye || generateColor(\"eye\", \"#ab4848\");\n  const hairColor = colors.hair || generateColor(\"hair\", \"#704e3b\");\n  const bgColor = colors.bg || \"#f5e8d6\";\n\n  const avatarData = [\n    // A predefined 2D array representing the avatar's pixel layout\n    [\n      hairColor,\n      hairColor,\n      hairColor,\n      hairColor,\n      hairColor,\n      hairColor,\n      hairColor,\n      hairColor,\n      hairColor,\n      hairColor,\n    ],\n    [\n      hairColor,\n      hairColor,\n      hairColor,\n      hairColor,\n      hairColor,\n      hairColor,\n      hairColor,\n      hairColor,\n      hairColor,\n      hairColor,\n    ],\n    [\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n    ],\n    [\n      skinColor,\n      eyeColor,\n      eyeColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      eyeColor,\n      eyeColor,\n      skinColor,\n      skinColor,\n    ],\n    [\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n    ],\n    [\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n    ],\n    [\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n    ],\n    [\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n    ],\n    [\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n    ],\n    [\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n    ],\n  ];\n\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox=\"0 0 100 100\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      {avatarData.map((row, rowIndex) =>\n        row.map((color, colIndex) => (\n          <rect\n            key={`${rowIndex}-${colIndex}`}\n            x={colIndex * blockSize}\n            y={rowIndex * blockSize}\n            width={blockSize}\n            height={blockSize}\n            fill={color}\n          />\n        )),\n      )}\n    </svg>\n  );\n};\n\nexport default Avatar;\n"],"names":["_ref","seed","_ref$size","size","_ref$blockSize","blockSize","_ref$colors","colors","generateColor","type","defaultColor","hash","i","length","charCodeAt","color","toString","substr","skinColor","skin","eyeColor","eye","hairColor","hair","React","width","height","viewBox","xmlns","map","row","rowIndex","colIndex","key","x","y","fill"],"mappings":"gKAce,SAAHA,OACVC,EAAID,EAAJC,KAAIC,EAAAF,EACJG,KAAAA,WAAID,EAAG,IAAGA,EAAAE,EAAAJ,EACVK,UAAAA,WAASD,EAAG,GAAEA,EAAAE,EAAAN,EACdO,OAAAA,WAAMD,EAAG,GAAEA,EAELE,EAAgB,SAACC,EAAcC,GAGnC,IADA,IAAIC,EAAO,EACFC,EAAI,EAAGA,EAAIX,EAAKY,OAAQD,IAC/BD,EAAOV,EAAKa,WAAWF,KAAOD,GAAQ,GAAKA,GAG7C,IADA,IAAII,EAAQ,IACHH,EAAI,EAAGA,EAAI,EAAGA,IAErBG,IAAU,MADKJ,GAAa,EAAJC,EAAQH,EAAKK,WAAW,GAAO,KAChCE,SAAS,KAAKC,QAAQ,GAE/C,OAAOF,GAASL,GAGZQ,EAAYX,EAAOY,MAAQX,EAAc,OAAQ,WACjDY,EAAWb,EAAOc,KAAOb,EAAc,MAAO,WAC9Cc,EAAYf,EAAOgB,MAAQf,EAAc,OAAQ,WA+HvD,OACEgB,uBACEC,MAAOtB,EACPuB,OAAQvB,EACRwB,QAAQ,cACRC,MAAM,8BAjIS,CAEjB,CACEN,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,GAEF,CACEA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,GAEF,CACEJ,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,GAEF,CACEA,EACAE,EACAA,EACAF,EACAA,EACAA,EACAE,EACAA,EACAF,EACAA,GAEF,CACEA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,GAEF,CACEA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,GAEF,CACEA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,GAEF,CACEA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,GAEF,CACEA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,GAEF,CACEA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,IAWYW,KAAI,SAACC,EAAKC,GAAQ,OAC5BD,EAAID,KAAI,SAACd,EAAOiB,GAAQ,OACtBR,wBACES,IAAQF,MAAYC,EACpBE,EAAGF,EAAW3B,EACd8B,EAAGJ,EAAW1B,EACdoB,MAAOpB,EACPqB,OAAQrB,EACR+B,KAAMrB"}