{"version":3,"file":"avatar-generator.cjs.development.js","sources":["../src/index.tsx"],"sourcesContent":["import React from \"react\";\n\ntype AvatarPropsType = {\n  seed: string;\n  size?: number;\n  blockSize?: number;\n  colors?: {\n    skin?: string;\n    eye?: string;\n    hair?: string;\n    bg?: string;\n  };\n};\n\nconst Avatar = ({\n  seed,\n  size = 100,\n  blockSize = 10,\n  colors = {},\n}: AvatarPropsType) => {\n  const generateColor = (type: string, defaultColor: string) => {\n    // A simple hash function to get consistent colors based on seed and type\n    let hash = 0;\n    for (let i = 0; i < seed.length; i++) {\n      hash = seed.charCodeAt(i) + ((hash << 5) - hash);\n    }\n    let color = \"#\";\n    for (let i = 0; i < 3; i++) {\n      const value = (hash >> (i * 8 + type.charCodeAt(0))) & 0xff;\n      color += (\"00\" + value.toString(16)).substr(-2);\n    }\n    return color || defaultColor;\n  };\n\n  const skinColor = colors.skin || generateColor(\"skin\", \"#f5d6b3\");\n  const eyeColor = colors.eye || generateColor(\"eye\", \"#ab4848\");\n  const hairColor = colors.hair || generateColor(\"hair\", \"#704e3b\");\n  const bgColor = colors.bg || \"#f5e8d6\";\n\n  const avatarData = [\n    // A predefined 2D array representing the avatar's pixel layout\n    [\n      hairColor,\n      hairColor,\n      hairColor,\n      hairColor,\n      hairColor,\n      hairColor,\n      hairColor,\n      hairColor,\n      hairColor,\n      hairColor,\n    ],\n    [\n      hairColor,\n      hairColor,\n      hairColor,\n      hairColor,\n      hairColor,\n      hairColor,\n      hairColor,\n      hairColor,\n      hairColor,\n      hairColor,\n    ],\n    [\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n    ],\n    [\n      skinColor,\n      eyeColor,\n      eyeColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      eyeColor,\n      eyeColor,\n      skinColor,\n      skinColor,\n    ],\n    [\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n    ],\n    [\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n    ],\n    [\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n    ],\n    [\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n    ],\n    [\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n    ],\n    [\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n      skinColor,\n    ],\n  ];\n\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox=\"0 0 100 100\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      {avatarData.map((row, rowIndex) =>\n        row.map((color, colIndex) => (\n          <rect\n            key={`${rowIndex}-${colIndex}`}\n            x={colIndex * blockSize}\n            y={rowIndex * blockSize}\n            width={blockSize}\n            height={blockSize}\n            fill={color}\n          />\n        )),\n      )}\n    </svg>\n  );\n};\n\nexport default Avatar;\n"],"names":["Avatar","_ref","seed","_ref$size","size","_ref$blockSize","blockSize","_ref$colors","colors","generateColor","type","defaultColor","hash","i","length","charCodeAt","color","value","toString","substr","skinColor","skin","eyeColor","eye","hairColor","hair","avatarData","React","width","height","viewBox","xmlns","map","row","rowIndex","colIndex","key","x","y","fill"],"mappings":"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"}